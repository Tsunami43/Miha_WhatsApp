from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext

from bot import keyboards
from bot.filters import AdminFilter, RUNNING
from bot.states import Account, TJson

from os import remove
import json

from green_api import instance
from green_api.types.objects import Message as WA_Message


from utils.loggers import target_logger
logger = target_logger(__name__)

router = Router()


@router.message(AdminFilter(), StateFilter(None), F.text=="üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ üë§")
async def setting_handler(message: Message, state: FSMContext):
    await state.set_state(Account.menu)
    await message.answer(
        text=
            "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.</b>\n\n"+
            "<b>-</b>–ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å.\n"+
            "<b>-</b>–î–ª—è —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å –µ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        ,
        reply_markup=keyboards.account()
    )

@router.message(AdminFilter(), StateFilter(None), F.text=="üí¨ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç üí¨")
async def new_text_handler(message: Message, state: FSMContext):
    await state.set_state(TJson.file)
    await message.answer(
        text=
            "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤, —Å–∫–∏–Ω—å—Ç–µ <b>json</b> —Ñ–∞–π–ª:"
        ,
        reply_markup=keyboards.cancel()
    )

@router.message(AdminFilter(), TJson.file, F.text=="üö´ –û—Ç–º–µ–Ω–∞ üö´")
async def cancel_json_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>",
        reply_markup=keyboards.menu()
    )

@router.message(AdminFilter(), TJson.file, F.document.mime_type=="application/json")
async def json_handler(message: Message, state: FSMContext, bot: Bot):
    try:
        path = "bot/assets/q&a.json"
        remove(path)
        file = await bot.get_file(message.document.file_id)
        await bot.download_file(file.file_path, path)
        await message.answer(
            "<b>–£—Å–ø–µ—Ö!</b> –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ.",
            reply_markup=keyboards.menu()
        )
    except:
        await message.answer(
            "<b>–û—à–∏–±–∫–∞!</b>",
            reply_markup=keyboards.menu()
        )
    finally:
        await state.clear()


@router.message(AdminFilter(), StateFilter(None), F.text=="üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å", RUNNING)
async def run_handler(message: Message):
    await message.answer(
        "üü¢ –£–∂–µ –∑–∞–ø—É—â–µ–Ω üü¢"
    )


@router.message(AdminFilter(), StateFilter(None), F.text=="üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å")
async def run_handler(message: Message): 

    RUNNING.state = True
    try:
        if await instance.get_state_instance():
            await message.answer(
                "üü¢ <b>WhatsApp –∑–∞–ø—É—â–µ–Ω</b>"
            )

            with open("bot/assets/q&a.json") as json_data:
                data = json.load(json_data)

            while RUNNING.state:
                wa_message = await instance.receive_notification()
                
                if isinstance(wa_message, WA_Message):
                    
                    text = "The question is clear. Unfortunately, I have to leave immediately. I'll get back to you later."

                    for key in data:
                        if key in wa_message.text.lower():
                            text = data[key]
                            break
                        
                    try:
                        await instance.send_message(
                            chat_id=wa_message.chat_id,
                            text=text,
                            reply_message_id=wa_message.message_id
                        )
                    except Exception as ex:
                        logger.error(ex)

            await message.answer(
                "üî¥ <b>WhatsApp –æ—Ç–∫–ª—é—á–µ–Ω</b>"
            )

        else:
            RUNNING.state = False
            await message.answer(
                "<b>–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º!</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
            )

    except Exception as ex:
        logger.error(ex)
        RUNNING.state = False
        await message.answer(
            "<b>–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º!</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )

@router.message(AdminFilter(), StateFilter(None), F.text=="üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", RUNNING)
async def stop1_handler(message: Message):
    RUNNING.state = False
    await message.answer(
        "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º"
    )


@router.message(AdminFilter(), StateFilter(None), F.text=="üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
async def stop2_handler(message: Message):
    await message.answer(
        "üî¥ –ù–µ –∑–∞–ø—É—â–µ–Ω üî¥"
    )